// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace meudiscord.Infra.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240626181805_deletecascade")]
    partial class deletecascade
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("ChannelModel", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("createdAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("externalId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(200)
                        .HasColumnType("char(200)");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("serverId")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("externalId");

                    b.HasIndex("serverId");

                    b.ToTable("channels");
                });

            modelBuilder.Entity("MessageModel", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("createdAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("externalId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(200)
                        .HasColumnType("char(200)");

                    b.Property<int>("idChannel")
                        .HasColumnType("int");

                    b.Property<int>("idUser")
                        .HasColumnType("int");

                    b.Property<string>("message")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("id");

                    b.HasIndex("externalId");

                    b.HasIndex("idChannel");

                    b.HasIndex("idUser");

                    b.ToTable("messages");
                });

            modelBuilder.Entity("ServerModel", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("createdAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("externalId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(200)
                        .HasColumnType("char(200)");

                    b.Property<int>("idUser")
                        .HasColumnType("int");

                    b.Property<string>("serverName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("id");

                    b.HasIndex("externalId");

                    b.HasIndex("idUser");

                    b.ToTable("servers");
                });

            modelBuilder.Entity("TokenModel", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("createdAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<Guid>("externalId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(200)
                        .HasColumnType("char(200)");

                    b.Property<string>("token")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("id");

                    b.HasIndex("email");

                    b.HasIndex("externalId");

                    b.ToTable("tokens");
                });

            modelBuilder.Entity("UserModel", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("createdAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<Guid>("externalId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(200)
                        .HasColumnType("char(200)");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.HasKey("id");

                    b.HasIndex("externalId");

                    b.ToTable("users");
                });

            modelBuilder.Entity("ChannelModel", b =>
                {
                    b.HasOne("ServerModel", "server")
                        .WithMany("channels")
                        .HasForeignKey("serverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("server");
                });

            modelBuilder.Entity("MessageModel", b =>
                {
                    b.HasOne("ChannelModel", "channel")
                        .WithMany("messages")
                        .HasForeignKey("idChannel")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UserModel", "user")
                        .WithMany("messages")
                        .HasForeignKey("idUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("channel");

                    b.Navigation("user");
                });

            modelBuilder.Entity("ServerModel", b =>
                {
                    b.HasOne("UserModel", "user")
                        .WithMany("servers")
                        .HasForeignKey("idUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("user");
                });

            modelBuilder.Entity("ChannelModel", b =>
                {
                    b.Navigation("messages");
                });

            modelBuilder.Entity("ServerModel", b =>
                {
                    b.Navigation("channels");
                });

            modelBuilder.Entity("UserModel", b =>
                {
                    b.Navigation("messages");

                    b.Navigation("servers");
                });
#pragma warning restore 612, 618
        }
    }
}
